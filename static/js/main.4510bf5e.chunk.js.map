{"version":3,"sources":["logo.svg","components/Postform.js","actions/postActions.js","actions/types.js","reducers/postReducer.js","reducers/loadReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostForm","showMore","props","posts","newPosts","loading","page","this","className","items","map","post","i","key","src","urls","icon","faSpinner","size","rotation","onClick","Component","connect","dispatch","pageNumber","data","val","type","fetch","then","res","json","payload","initialState","combineReducers","state","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8LAAAA,EAAOC,QAAU,IAA0B,kC,sJCS9BC,EAAb,4MAOIC,SAAW,WAAO,IAAD,EACuB,EAAKC,MAAjCC,EADK,EACLA,MAAOC,EADF,EACEA,SADF,EACYC,QAIzBD,EAFmBD,EAAMG,OAVjC,kEAEwB,IAAD,EACaC,KAAKL,MAAzBC,EADO,EACPA,OACRC,EAFe,EACAA,UACND,EAAMG,QAJvB,+BAec,IAAD,EACoBC,KAAKL,MAAxBC,EADD,EACCA,MAAOE,EADR,EACQA,QAEb,OACI,6BACI,6CACA,yBAAKG,UAAU,kBAEPL,EAAMM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKJ,UAAU,UAAUK,IAAKD,GAC1B,yBAAKE,IAAOH,EAAKI,KAAL,aAOnBV,EAAQA,QAEP,kBAAC,IAAD,CAAiBW,KAAMC,IAAWC,KAAK,KAAKC,SAAU,KADtD,kBAAC,IAAD,CAAiBH,KAAMC,IAAWC,KAAK,KAAKE,QAASb,KAAKN,gBAjCpF,GAA8BoB,aAqDfC,eAZS,SAAC,GAAD,MAAyB,CAC7CnB,MADoB,EAAGA,MAGvBE,QAHoB,EAAUA,YAOP,SAAAkB,GAAQ,MAAK,CACpCnB,SAAU,SAAAoB,GAAU,OAAID,GClDHE,EDkDqB,CAAEtB,MAAOqB,EAAYE,IAAK,ICjD7D,SAACH,GACJA,EARG,CACHI,KCH2B,wBDYvBC,MAAM,wHAAD,OAAyHH,EAAKC,IAA9H,iBAA0ID,EAAKtB,QACnJ0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1B,GAAK,OAAIoB,EAAS,CACnBI,KCbQ,YDcTK,QAAS7B,UARD,IAACsB,MDsDVH,CAA6CtB,G,sCGrDtDiC,EAAe,CACjBxB,MAAQ,GACRH,KAAM,GCTJ2B,EAAe,CACjB5B,SAAU,GCAC6B,4BAAgB,CAC3B/B,MFWW,WAAuC,IAA7BgC,EAA4B,uDAApBF,EAAaG,EAAO,uCACjD,OAAOA,EAAOT,MASV,IDvBiB,YCuBA,sBACVQ,EADU,CAGb1B,MAAK,sBAAO0B,EAAM1B,OAAb,YAAsB2B,EAAOJ,UAClC1B,KAAO6B,EAAM7B,KAAO,IAGxB,QACA,OAAO6B,IE5BX9B,QDEW,WAAuC,IAA7B8B,EAA4B,uDAApBF,EAAaG,EAAO,uCACjD,OAAOA,EAAOT,MACV,IFT2B,sBESA,sBACpBQ,EADoB,CAEvB9B,SAAU,IAEd,IFXiB,YEWA,sBACV8B,EADU,CAEb9B,SAAU,IAGd,QACA,OAAO8B,MEVTE,EAAa,CAACC,KAOLC,EANDC,sBACVC,EANiB,GAQjBC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCQ5BO,MAZf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAQA,GAChB,yBAAK/B,UAAU,OAEb,kBAAC,EAAD,SCFYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4510bf5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { newPosts } from '../actions/postActions'\n// import '../components/Postform.css';\nimport '../App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\n\nexport class PostForm extends Component {\n\n    componentDidMount(){\n        const { posts, newPosts } = this.props;\n        newPosts(posts.page);\n    }\n\n    showMore = () => {\n        const { posts, newPosts ,loading} = this.props;\n        // update the post page\n        const pageNumber = posts.page;\n        // newPosts(posts.page);\n        newPosts(pageNumber);\n    }\n\n    render() {\n      const { posts, loading } = this.props;\n      \n        return (\n            <div>\n                <h2>Image Gallery</h2>\n                <div className=\"flex-container\" >\n                    {\n                        posts.items.map((post, i) =>\n                            <div className=\"content\" key={i}>\n                                <img src = {post.urls['small']} />\n                            </div>\n                        )\n                     }\n                     </div>\n \n                      {\n                        !loading.loading\n                        ? <FontAwesomeIcon icon={faSpinner} size=\"2x\" onClick={this.showMore} />\n                        : <FontAwesomeIcon icon={faSpinner} size=\"2x\" rotation={90} />\n                      } \n\n            </div>\n        )\n    }\n}\nconst mapStateToProps = ({ posts, loading }) => ({\n    posts,\n    // loading: loading || posts.loading\n    loading \n\n});\n\nconst mapDispatchToProps = dispatch => ({\n    newPosts: pageNumber => dispatch(newPosts({ posts: pageNumber, val: 10}))\n    \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\n","import { FETCH_POSTS_REQUEST,NEW_POSTS } from '../actions/types'\nexport const  fetchPostsRequest = () =>{\n    return {\n        type : FETCH_POSTS_REQUEST\n    }\n}\n\n\nexport const newPosts = (data) => {\n    return (dispatch) => {\n        dispatch(fetchPostsRequest())\n        // setTimeout(() =>{\n            fetch(`https://api.unsplash.com/photos/?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02&per_page=${data.val}&page=${data.posts}`)\n            .then(res => res.json())\n            .then(posts => dispatch({\n                 type: NEW_POSTS,         \n                payload: posts,\n            }))\n        // },2000)\n    }\n}\n","export const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\n// export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POSTS = 'NEW_POSTS';","// import { FETCH_POSTS_REQUEST,NEW_POSTS } from '../actions/types'\nimport { NEW_POSTS } from '../actions/types'\n\n// const initialState = {\n//     items : [],\n//     loading : false,\n//     page: 1\n// }\n\nconst initialState = {\n    items : [],\n    page: 1\n}\n\n\nexport default function (state = initialState,action){\n    switch(action.type){\n        // case FETCH_POSTS_REQUEST : return{\n        //     ...state,\n        //     loading : true\n        // }\n        // case FETCH_POSTS : return{\n        //     ...state,\n        //     items : action.payload\n        // }\n        case NEW_POSTS : return{\n            ...state,\n            // loading : false,\n            items : [...state.items,...action.payload],\n            page : state.page + 1\n        }\n\n        default :\n        return state;\n    }\n\n}\n","import { FETCH_POSTS_REQUEST,NEW_POSTS } from '../actions/types'\n\nconst initialState = {\n    loading : false,\n}\n\n\nexport default function (state = initialState,action){\n    switch(action.type){\n        case FETCH_POSTS_REQUEST : return{\n            ...state,\n            loading : true\n        }\n        case NEW_POSTS : return{\n            ...state,\n            loading : false,\n          \n        }\n        default :\n        return state;\n    }\n\n}\n","import {combineReducers} from 'redux'\nimport postReducer from './postReducer'\nimport loadReducer from './loadReducer'\nexport default combineReducers({\n    posts : postReducer,\n    loading : loadReducer\n})\n\n// const rootReducers = combineReducers({\n//     posts : postReducer\n// })\n\n// export default rootReducers","import { createStore,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nimport rootReducer from './reducers';\nconst initialState = {\n\n};\n\nconst middleware = [thunk];\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n    );\n\nexport default store;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport PostForm from './components/Postform';\n\nimport store from './store';\n// const store  = createStore(()=> [], {},applyMiddleware());\n\nfunction App() {\n  return (\n    <Provider store= {store}>\n      <div className=\"App\">\n\n        <PostForm />\n      </div>\n    </Provider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}